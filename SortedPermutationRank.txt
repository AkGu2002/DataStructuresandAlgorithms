*/
Given a string, find the rank of the string amongst its permutations sorted lexicographically. 

Assume that no characters are repeated.

Example :

Input : 'acb'
Output : 2

The order permutations with letters 'a', 'c', and 'b' : 
abc
acb
bac
bca
cab
cba

*/

Code:

const int CHAR=256;
int fact(long long int n){
    if(n==0 || n==1) return 1;
    return n*fact(n-1);
}
int Solution::findRank(string A) {
    long long int res=1;
    long long int n=A.length();
    long long int mul=fact(n);
    int count[CHAR]={0};
    for(int i=0;i<n;i++){
        count[A[i]]++;
    }
    
    for(int i=1;i<CHAR;i++){
        count[i]+=count[i-1];
    }
    for(int i=0;i<n;i++){
        mul=mul/(n-i);
        if(A[i]-1>=0) res= (res%1000003 + mul*count[A[i]-1]%1000003)%1000003;
        
        for(int j=A[i];j<CHAR;j++){
            count[j]--;
        }
    }
    return res;
    
}
